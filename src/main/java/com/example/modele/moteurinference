public boolean chainageArriere(ArrayList<Element> b) throws CloneNotSupportedException {
        BaseRegles BR = (BaseRegles) this.BC.getBaseRegles().clone();
        BaseFaits BF = (BaseFaits) this.BC.getBaseFaits().clone();
        //Consequent consequent = new Consequent(new Element("Neerlandais", new Valeur("true"),false));
        //Element e = new Element("Allemand", new Valeur("false"), false);
        //consequent.ajouterElement(e);
        //.ajouterRegle(new Premisse(new Element("Netherland", new Valeur("true"), false)), consequent);
        this.explications.clear();
        System.out.println("\nOn recherche si " + b.toString() + " est demandable\n");
        return chainageArriereRecursif(b, BR, BF, 0 );
    }

    public boolean chainageArriereRecursif(ArrayList<Element> b, BaseRegles BR, BaseFaits BF, int nbIteration){
        nbIteration++;
        Iterator<Regle> iterateurBR = BR.iterator();
        if(BF.contient(b)){
            System.out.println(b + "est déjà dans la BF");
            return true;
        }else{
            System.out.println(b + " n'est pas dans la BF, on doit le rechercher");
        }
        //Deuxième cas : si b est demandable avec une règle
        while (iterateurBR.hasNext()) {
            Regle r = iterateurBR.next();
            if(r.getConsequent().equalsListElement(b)){
                System.out.println("La regle " + r.toStringSansNomRegle() + " a pour consequent " + b);
                if(BF.contient(r.getAntecedants())) {
                    System.out.println(b + " est demandable avec la regle " + r.toStringSansNomRegle());
                    this.explications.add(new Explication(nbIteration, r));
                    return true;
                }
                else{
                    System.out.println("On recherche si " + r.getAntecedants() + " est demandable\n");
                    this.explications.add(new Explication(nbIteration, r));
                    return chainageArriereRecursif(r.getAntecedants(), BR, BF, nbIteration);
                }
            }
        }
        System.out.println("Aucune règle permet de demander " + b);
        return false;
    }